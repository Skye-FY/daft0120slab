{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import libraries\n",
    "import pymysql\n",
    "from sqlalchemy import create_engine\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"\\n#Data Pipeline\\n\\n# Acquisition of Source Data\\ndef acqData(data_sc):\\n    path = data_sc\\n    df = pd.read_csv(path)\\n    return df.head()\\n\\n# Wrangling\\ndef getInsight(datafrm):\\n    print('Shape:\\n', datafrm.shape, '\\n\\n\\nData Type:\\n',datafrm.dtypes, '\\n\\n\\nFind Null Data:\\n', datafrm.isnull().sum())\\n    for i in datafrm.columns:\\n        print(datafrm[i].value_counts())\\ndef normalize(datafrm):\\n    for i in datafrm.columns:\\n        if (datafrm[i].dtypes == 'target dtype to be changed') is True:\\n            datafrm[i] = datafrm[i].astype('desired dtype') \\n    drop_col = ['desired cols to be dropped']\\n    d = datafrm(columns = drop_col)\\n    def normal(x):\\n        if 'China' in x:\\n            x = 'Mainland China'\\n            return x\\n        elif 'Hong Kong' in x:\\n            x = 'Hong Kong, China'\\n            return x\\n        elif 'Taiwan' in x:\\n            x = 'Taiwan, China'\\n            return x\\n        elif 'Macau' in x:\\n            x = 'Macau, China'\\n            return x\\n        else:\\n            return x\\n\\n    d['desired col to normalize'] = list(map(normal, d['desired col to normalize']))\\n    print(d.head())\\n    return df\\n\\n\\ndef checkNull(datafrm):\\n    print(datafrm.isna())\\n    null_df = datafrm[(datafrm['col'].isnull() == True)]\\n    not_null_df = datafrm[(datafrm['col'].isnull() == False)]\\n    print(null_df.head(), not_null_df.head())\\n    return null_df, not_null_df\\n\\n# Analysis\\ndef toSQL(datafrm, sqldb):\\n    egn = 'mysql+pymysql://root:mshhgz999@localhost/' + str(sqldb)\\n    engine = create_engine(egn)\\n    datafrm.to_sql(str(sqldb), con = engine, if_exists='replace', index=False)\\n\\n    \\n    \\ndef frmSQLtoPd(sqldb,query):\\n    connection = pymysql.connect(user='root',\\n                         password='mshhgz999',\\n                         db = str(sqldb),\\n                         charset='utf8mb4',\\n                         cursorclass=pymysql.cursors.DictCursor)\\n    cursor = connection.cursor()\\n    cursor.execute(query)\\n    x = cursor.fetchall()\\n    df = pd.DataFrame(x)\\n    cursor.close()\\n    print(df.head())\\n    return df\\n\\n# Reporting\\n# tbcompleted\\n\""
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "#Data Pipeline\n",
    "\n",
    "# Acquisition of Source Data\n",
    "def acqData(data_sc):\n",
    "    path = data_sc\n",
    "    df = pd.read_csv(path)\n",
    "    return df.head()\n",
    "\n",
    "# Wrangling\n",
    "def getInsight(datafrm):\n",
    "    print('Shape:\\n', datafrm.shape, '\\n\\n\\nData Type:\\n',datafrm.dtypes, '\\n\\n\\nFind Null Data:\\n', datafrm.isnull().sum())\n",
    "    for i in datafrm.columns:\n",
    "        print(datafrm[i].value_counts())\n",
    "def normalize(datafrm):\n",
    "    for i in datafrm.columns:\n",
    "        if (datafrm[i].dtypes == 'target dtype to be changed') is True:\n",
    "            datafrm[i] = datafrm[i].astype('desired dtype') \n",
    "    drop_col = ['desired cols to be dropped']\n",
    "    d = datafrm(columns = drop_col)\n",
    "    def normal(x):\n",
    "        if 'China' in x:\n",
    "            x = 'Mainland China'\n",
    "            return x\n",
    "        elif 'Hong Kong' in x:\n",
    "            x = 'Hong Kong, China'\n",
    "            return x\n",
    "        elif 'Taiwan' in x:\n",
    "            x = 'Taiwan, China'\n",
    "            return x\n",
    "        elif 'Macau' in x:\n",
    "            x = 'Macau, China'\n",
    "            return x\n",
    "        else:\n",
    "            return x\n",
    "\n",
    "    d['desired col to normalize'] = list(map(normal, d['desired col to normalize']))\n",
    "    print(d.head())\n",
    "    return df\n",
    "\n",
    "\n",
    "def checkNull(datafrm):\n",
    "    print(datafrm.isna())\n",
    "    null_df = datafrm[(datafrm['col'].isnull() == True)]\n",
    "    not_null_df = datafrm[(datafrm['col'].isnull() == False)]\n",
    "    print(null_df.head(), not_null_df.head())\n",
    "    return null_df, not_null_df\n",
    "\n",
    "# Analysis\n",
    "def toSQL(datafrm, sqldb):\n",
    "    egn = 'mysql+pymysql://root:mshhgz999@localhost/' + str(sqldb)\n",
    "    engine = create_engine(egn)\n",
    "    datafrm.to_sql(str(sqldb), con = engine, if_exists='replace', index=False)\n",
    "\n",
    "    \n",
    "    \n",
    "def frmSQLtoPd(sqldb,query):\n",
    "    connection = pymysql.connect(user='root',\n",
    "                         password='mshhgz999',\n",
    "                         db = str(sqldb),\n",
    "                         charset='utf8mb4',\n",
    "                         cursorclass=pymysql.cursors.DictCursor)\n",
    "    cursor = connection.cursor()\n",
    "    cursor.execute(query)\n",
    "    x = cursor.fetchall()\n",
    "    df = pd.DataFrame(x)\n",
    "    cursor.close()\n",
    "    print(df.head())\n",
    "    return df\n",
    "\n",
    "# Reporting\n",
    "def plt(df):\n",
    "    return df.plot(kind = 'bar', stacked = 'True', figsize = (25, 20))\n",
    "# tbcompleted\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Acquisition of Source Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sno</th>\n",
       "      <th>Date</th>\n",
       "      <th>Province/State</th>\n",
       "      <th>Country</th>\n",
       "      <th>Last Update</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Anhui</td>\n",
       "      <td>China</td>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Beijing</td>\n",
       "      <td>China</td>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Chongqing</td>\n",
       "      <td>China</td>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Fujian</td>\n",
       "      <td>China</td>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Gansu</td>\n",
       "      <td>China</td>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Sno                 Date Province/State Country          Last Update  \\\n",
       "0    1  01/22/2020 12:00:00          Anhui   China  01/22/2020 12:00:00   \n",
       "1    2  01/22/2020 12:00:00        Beijing   China  01/22/2020 12:00:00   \n",
       "2    3  01/22/2020 12:00:00      Chongqing   China  01/22/2020 12:00:00   \n",
       "3    4  01/22/2020 12:00:00         Fujian   China  01/22/2020 12:00:00   \n",
       "4    5  01/22/2020 12:00:00          Gansu   China  01/22/2020 12:00:00   \n",
       "\n",
       "   Confirmed  Deaths  Recovered  \n",
       "0        1.0     0.0        0.0  \n",
       "1       14.0     0.0        0.0  \n",
       "2        6.0     0.0        0.0  \n",
       "3        1.0     0.0        0.0  \n",
       "4        0.0     0.0        0.0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "path = '../data/novel-corona-virus-2019-dataset/2019_nCoV_data.csv'\n",
    "pd.set_option('display.max_columns', None)\n",
    "\n",
    "CoV_2019 = pd.read_csv(path)\n",
    "CoV_2019.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Wrangling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape:\n",
      " (770, 8) \n",
      "\n",
      "\n",
      "Data Type:\n",
      " Sno                 int64\n",
      "Date               object\n",
      "Province/State     object\n",
      "Country            object\n",
      "Last Update        object\n",
      "Confirmed         float64\n",
      "Deaths            float64\n",
      "Recovered         float64\n",
      "dtype: object \n",
      "\n",
      "\n",
      "Find Null Data:\n",
      " Sno                 0\n",
      "Date                0\n",
      "Province/State    185\n",
      "Country             0\n",
      "Last Update         0\n",
      "Confirmed           0\n",
      "Deaths              0\n",
      "Recovered           0\n",
      "dtype: int64\n",
      "770    1\n",
      "193    1\n",
      "263    1\n",
      "262    1\n",
      "261    1\n",
      "      ..\n",
      "511    1\n",
      "510    1\n",
      "509    1\n",
      "508    1\n",
      "1      1\n",
      "Name: Sno, Length: 770, dtype: int64\n",
      "02/04/2020 22:00:00    70\n",
      "02/03/2020 21:40:00    69\n",
      "02/02/2020 21:00:00    67\n",
      "02/01/2020 23:00:00    67\n",
      "01/31/2020 19:00:00    63\n",
      "01/30/2020 21:30:00    59\n",
      "01/29/2020 21:00:00    56\n",
      "01/28/2020 23:00:00    52\n",
      "01/27/2020 20:30:00    52\n",
      "01/26/2020 23:00:00    47\n",
      "01/23/2020 12:00:00    45\n",
      "01/25/2020 22:00:00    44\n",
      "01/24/2020 12:00:00    41\n",
      "01/22/2020 12:00:00    38\n",
      "Name: Date, dtype: int64\n",
      "Shanxi              14\n",
      "Macau               14\n",
      "Jilin               14\n",
      "Chongqing           14\n",
      "Ningxia             14\n",
      "Guangxi             14\n",
      "Henan               14\n",
      "Hainan              14\n",
      "Anhui               14\n",
      "Hubei               14\n",
      "Fujian              14\n",
      "Shanghai            14\n",
      "Shaanxi             14\n",
      "Tianjin             14\n",
      "Inner Mongolia      14\n",
      "Hong Kong           14\n",
      "Jiangxi             14\n",
      "Gansu               14\n",
      "Taiwan              14\n",
      "Xinjiang            14\n",
      "Yunnan              14\n",
      "Sichuan             14\n",
      "Heilongjiang        14\n",
      "Hebei               14\n",
      "Guangdong           14\n",
      "Beijing             14\n",
      "Shandong            14\n",
      "Guizhou             14\n",
      "Qinghai             14\n",
      "Zhejiang            14\n",
      "Jiangsu             14\n",
      "Hunan               14\n",
      "Liaoning            14\n",
      "Washington          10\n",
      "New South Wales      9\n",
      "Tibet                9\n",
      "Victoria             9\n",
      "British Columbia     8\n",
      "Ontario              8\n",
      "Queensland           7\n",
      "Illinois             7\n",
      "California           6\n",
      "Arizona              6\n",
      "Bavaria              5\n",
      "Los Angeles, CA      4\n",
      "Boston, MA           4\n",
      "Orange, CA           4\n",
      "Chicago, IL          4\n",
      "Seattle, WA          4\n",
      "South Australia      4\n",
      "Tempe, AZ            4\n",
      "Santa Clara, CA      4\n",
      "London, ON           2\n",
      "San Benito, CA       2\n",
      "Toronto, ON          2\n",
      "Chicago              1\n",
      "Name: Province/State, dtype: int64\n",
      "Mainland China          398\n",
      "US                       60\n",
      "China                    34\n",
      "Australia                32\n",
      "Canada                   20\n",
      "South Korea              14\n",
      "Thailand                 14\n",
      "Japan                    14\n",
      "Singapore                13\n",
      "Taiwan                   13\n",
      "Hong Kong                13\n",
      "Macau                    13\n",
      "Vietnam                  13\n",
      "Malaysia                 12\n",
      "France                   12\n",
      "Nepal                    11\n",
      "Germany                   9\n",
      "Cambodia                  9\n",
      "Sri Lanka                 9\n",
      "United Arab Emirates      7\n",
      "Philippines               7\n",
      "Finland                   7\n",
      "Italy                     6\n",
      "India                     6\n",
      "Sweden                    5\n",
      "UK                        5\n",
      "Spain                     5\n",
      "Russia                    5\n",
      "Ivory Coast               1\n",
      "Brazil                    1\n",
      "Belgium                   1\n",
      "Mexico                    1\n",
      "Name: Country, dtype: int64\n",
      "01/31/2020 19:00:00    63\n",
      "01/30/2020 21:30:00    59\n",
      "01/29/2020 21:00:00    56\n",
      "01/27/2020 20:30:00    52\n",
      "01/28/2020 23:00:00    52\n",
      "                       ..\n",
      "2020-04-02 13:33:00     1\n",
      "2020-04-02 16:43:00     1\n",
      "2020-05-02 01:43:00     1\n",
      "01/24/2020 16:00:00     1\n",
      "2020-02-02 01:33:00     1\n",
      "Name: Last Update, Length: 122, dtype: int64\n",
      "1.0       141\n",
      "2.0        84\n",
      "4.0        43\n",
      "3.0        24\n",
      "8.0        22\n",
      "         ... \n",
      "190.0       1\n",
      "194.0       1\n",
      "228.0       1\n",
      "7153.0      1\n",
      "340.0       1\n",
      "Name: Confirmed, Length: 204, dtype: int64\n",
      "0.0      674\n",
      "1.0       66\n",
      "2.0       17\n",
      "479.0      1\n",
      "414.0      1\n",
      "350.0      1\n",
      "294.0      1\n",
      "249.0      1\n",
      "204.0      1\n",
      "162.0      1\n",
      "125.0      1\n",
      "100.0      1\n",
      "76.0       1\n",
      "52.0       1\n",
      "24.0       1\n",
      "17.0       1\n",
      "Name: Deaths, dtype: int64\n",
      "0.0      542\n",
      "1.0       71\n",
      "2.0       40\n",
      "3.0       18\n",
      "5.0       17\n",
      "4.0       14\n",
      "7.0        8\n",
      "9.0        6\n",
      "14.0       6\n",
      "10.0       6\n",
      "12.0       3\n",
      "6.0        3\n",
      "23.0       3\n",
      "8.0        2\n",
      "20.0       2\n",
      "13.0       2\n",
      "48.0       1\n",
      "41.0       1\n",
      "169.0      1\n",
      "28.0       1\n",
      "31.0       1\n",
      "522.0      1\n",
      "42.0       1\n",
      "44.0       1\n",
      "47.0       1\n",
      "27.0       1\n",
      "80.0       1\n",
      "35.0       1\n",
      "90.0       1\n",
      "116.0      1\n",
      "396.0      1\n",
      "32.0       1\n",
      "11.0       1\n",
      "63.0       1\n",
      "19.0       1\n",
      "22.0       1\n",
      "215.0      1\n",
      "36.0       1\n",
      "15.0       1\n",
      "16.0       1\n",
      "18.0       1\n",
      "21.0       1\n",
      "295.0      1\n",
      "Name: Recovered, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#accquire insights of data in each column\n",
    "\n",
    "print('Shape:\\n', CoV_2019.shape, '\\n\\n\\nData Type:\\n',CoV_2019.dtypes, '\\n\\n\\nFind Null Data:\\n', CoV_2019.isnull().sum())\n",
    "\n",
    "for i in CoV_2019.columns:\n",
    "    print(CoV_2019[i].value_counts())\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# cleaning and normalizing data based on insights accquired above\n",
    "for i in CoV_2019.columns:\n",
    "    if (CoV_2019[i].dtypes == float) is True:\n",
    "        CoV_2019[i] = CoV_2019[i].astype(int) \n",
    "drop_col = ['Sno','Last Update']\n",
    "d = CoV_2019.drop(columns = drop_col)\n",
    "def normal(x):\n",
    "    if 'China' in x:\n",
    "        x = 'Mainland China'\n",
    "        return x\n",
    "    elif 'Hong Kong' in x:\n",
    "        x = 'Hong Kong, China'\n",
    "        return x\n",
    "    elif 'Taiwan' in x:\n",
    "        x = 'Taiwan, China'\n",
    "        return x\n",
    "    elif 'Macau' in x:\n",
    "        x = 'Macau, China'\n",
    "        return x\n",
    "    else:\n",
    "        return x\n",
    "\n",
    "\n",
    "d['Country'] = list(map(normal, d['Country']))\n",
    "d = d.rename(columns = {'Province/State':'Province'})\n",
    "cov_full = d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(185, 6)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Province</th>\n",
       "      <th>Country</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Japan</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Thailand</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>South Korea</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>01/23/2020 12:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Japan</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>01/23/2020 12:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Thailand</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Date Province      Country  Confirmed  Deaths  Recovered\n",
       "35  01/22/2020 12:00:00      NaN        Japan          2       0          0\n",
       "36  01/22/2020 12:00:00      NaN     Thailand          2       0          0\n",
       "37  01/22/2020 12:00:00      NaN  South Korea          1       0          0\n",
       "73  01/23/2020 12:00:00      NaN        Japan          1       0          0\n",
       "74  01/23/2020 12:00:00      NaN     Thailand          3       0          0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cov_province_null = d[(d['Province'].isnull() == True)]\n",
    "\n",
    "print(cov_province_null.shape)\n",
    "cov_province_null.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(585, 6)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Province</th>\n",
       "      <th>Country</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Anhui</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Beijing</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Chongqing</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Fujian</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Gansu</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Date   Province         Country  Confirmed  Deaths  \\\n",
       "0  01/22/2020 12:00:00      Anhui  Mainland China          1       0   \n",
       "1  01/22/2020 12:00:00    Beijing  Mainland China         14       0   \n",
       "2  01/22/2020 12:00:00  Chongqing  Mainland China          6       0   \n",
       "3  01/22/2020 12:00:00     Fujian  Mainland China          1       0   \n",
       "4  01/22/2020 12:00:00      Gansu  Mainland China          0       0   \n",
       "\n",
       "   Recovered  \n",
       "0          0  \n",
       "1          0  \n",
       "2          0  \n",
       "3          0  \n",
       "4          0  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cov_complete_data = d[(d['Province'].isnull() == False)]\n",
    "print(cov_complete_data.shape)\n",
    "cov_complete_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exporting data to SQL\n",
    "engine = create_engine('mysql+pymysql://root:mshhgz999@localhost/cov_2019')\n",
    "cov_complete_data.to_sql('complete', con = engine, if_exists='replace', index=False)\n",
    "cov_province_null.to_sql('province_null', con = engine, if_exists='replace', index=False)\n",
    "cov_full.to_sql('full_data', con = engine, if_exists='replace', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pymysql.cursors  \n",
    "connection = pymysql.connect(user='root',\n",
    "                             password='mshhgz999',\n",
    "                             db = 'cov_2019',\n",
    "                             charset='utf8mb4',\n",
    "                             cursorclass=pymysql.cursors.DictCursor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Province</th>\n",
       "      <th>Country</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Anhui</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Beijing</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Chongqing</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Fujian</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Gansu</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Date   Province         Country  Confirmed  Deaths  \\\n",
       "0  01/22/2020 12:00:00      Anhui  Mainland China          1       0   \n",
       "1  01/22/2020 12:00:00    Beijing  Mainland China         14       0   \n",
       "2  01/22/2020 12:00:00  Chongqing  Mainland China          6       0   \n",
       "3  01/22/2020 12:00:00     Fujian  Mainland China          1       0   \n",
       "4  01/22/2020 12:00:00      Gansu  Mainland China          0       0   \n",
       "\n",
       "   Recovered  \n",
       "0          0  \n",
       "1          0  \n",
       "2          0  \n",
       "3          0  \n",
       "4          0  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q0 = '''\n",
    "SELECT * \n",
    "FROM cov_2019.full_data\n",
    "'''\n",
    "\n",
    "cursor = connection.cursor()\n",
    "cursor.execute(q0)\n",
    "\n",
    "x = cursor.fetchall()\n",
    "d_full = pd.DataFrame(x)\n",
    "cursor.close()\n",
    "d_full.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Province</th>\n",
       "      <th>Country</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Washington</td>\n",
       "      <td>US</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>None</td>\n",
       "      <td>Japan</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>None</td>\n",
       "      <td>Thailand</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>None</td>\n",
       "      <td>South Korea</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>01/23/2020 12:00:00</td>\n",
       "      <td>Washington</td>\n",
       "      <td>US</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Date    Province      Country  Confirmed  Deaths  Recovered\n",
       "0  01/22/2020 12:00:00  Washington           US          1       0          0\n",
       "1  01/22/2020 12:00:00        None        Japan          2       0          0\n",
       "2  01/22/2020 12:00:00        None     Thailand          2       0          0\n",
       "3  01/22/2020 12:00:00        None  South Korea          1       0          0\n",
       "4  01/23/2020 12:00:00  Washington           US          1       0          0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q1 = '''\n",
    "SELECT * \n",
    "FROM cov_2019.full_data\n",
    "WHERE Country NOT LIKE '%China' \n",
    "'''\n",
    "\n",
    "cursor = connection.cursor()\n",
    "cursor.execute(q1)\n",
    "\n",
    "x = cursor.fetchall()\n",
    "d_nonchn = pd.DataFrame(x)\n",
    "cursor.close()\n",
    "d_nonchn.to_sql('non_chn', con = engine, if_exists='replace', index=False)\n",
    "d_nonchn.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Province</th>\n",
       "      <th>Country</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Anhui</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Beijing</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Chongqing</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Fujian</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>Gansu</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Date   Province         Country  Confirmed  Deaths  \\\n",
       "0  01/22/2020 12:00:00      Anhui  Mainland China          1       0   \n",
       "1  01/22/2020 12:00:00    Beijing  Mainland China         14       0   \n",
       "2  01/22/2020 12:00:00  Chongqing  Mainland China          6       0   \n",
       "3  01/22/2020 12:00:00     Fujian  Mainland China          1       0   \n",
       "4  01/22/2020 12:00:00      Gansu  Mainland China          0       0   \n",
       "\n",
       "   Recovered  \n",
       "0          0  \n",
       "1          0  \n",
       "2          0  \n",
       "3          0  \n",
       "4          0  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q2 = '''\n",
    "SELECT * \n",
    "FROM cov_2019.full_data\n",
    "WHERE Country LIKE '%China' \n",
    "'''\n",
    "\n",
    "cursor = connection.cursor()\n",
    "cursor.execute(q2)\n",
    "\n",
    "x = cursor.fetchall()\n",
    "d_chn = pd.DataFrame(x)\n",
    "cursor.close()\n",
    "d_chn.to_sql('chn', con = engine, if_exists = 'replace', index = False)\n",
    "d_chn.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Total_Confirmed</th>\n",
       "      <th>Total_Deaths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>549</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>01/23/2020 12:00:00</td>\n",
       "      <td>644</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>01/24/2020 12:00:00</td>\n",
       "      <td>923</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>01/25/2020 22:00:00</td>\n",
       "      <td>1989</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>01/26/2020 23:00:00</td>\n",
       "      <td>2755</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Date  Total_Confirmed  Total_Deaths\n",
       "0  01/22/2020 12:00:00              549             0\n",
       "1  01/23/2020 12:00:00              644            18\n",
       "2  01/24/2020 12:00:00              923            26\n",
       "3  01/25/2020 22:00:00             1989            56\n",
       "4  01/26/2020 23:00:00             2755            80"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "connection = pymysql.connect(user='root',\n",
    "                             password='mshhgz999',\n",
    "                             db = 'cov_2019',\n",
    "                             charset='utf8mb4',\n",
    "                             cursorclass=pymysql.cursors.DictCursor)\n",
    "\n",
    "q3 = '''\n",
    "SELECT \n",
    "    `Date`,\n",
    "    SUM(Confirmed) AS 'Total_Confirmed',\n",
    "    SUM(Deaths) AS 'Total_Deaths'\n",
    "FROM cov_2019.chn\n",
    "GROUP BY `Date`\n",
    "ORDER BY `Date`\n",
    "'''\n",
    "\n",
    "cursor = connection.cursor()\n",
    "cursor.execute(q3)\n",
    "\n",
    "x = cursor.fetchall()\n",
    "d_timelineCh = pd.DataFrame(x)\n",
    "d_timelineCh[d_timelineCh.columns[1:]] = d_timelineCh[d_timelineCh.columns[1:]].astype(int)\n",
    "cursor.close()\n",
    "d_timelineCh.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Total_Confirmed</th>\n",
       "      <th>Total_Deaths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01/22/2020 12:00:00</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>01/23/2020 12:00:00</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>01/24/2020 12:00:00</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>01/25/2020 22:00:00</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>01/26/2020 23:00:00</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Date  Total_Confirmed  Total_Deaths\n",
       "0  01/22/2020 12:00:00                6             0\n",
       "1  01/23/2020 12:00:00                9             0\n",
       "2  01/24/2020 12:00:00               18             0\n",
       "3  01/25/2020 22:00:00               30             0\n",
       "4  01/26/2020 23:00:00               39             0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "connection = pymysql.connect(user='root',\n",
    "                             password='mshhgz999',\n",
    "                             db = 'cov_2019',\n",
    "                             charset='utf8mb4',\n",
    "                             cursorclass=pymysql.cursors.DictCursor)\n",
    "\n",
    "q4 = '''\n",
    "SELECT \n",
    "    `Date`,\n",
    "    SUM(Confirmed) AS 'Total_Confirmed',\n",
    "    SUM(Deaths) AS 'Total_Deaths'\n",
    "FROM cov_2019.non_chn\n",
    "GROUP BY `Date`\n",
    "ORDER BY `Date`\n",
    "'''\n",
    "\n",
    "cursor = connection.cursor()\n",
    "cursor.execute(q4)\n",
    "\n",
    "x = cursor.fetchall()\n",
    "d_timelineNch = pd.DataFrame(x)\n",
    "d_timelineNch[d_timelineNch.columns[1:]] = d_timelineNch[d_timelineNch.columns[1:]].astype(int)\n",
    "cursor.close()\n",
    "d_timelineNch.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Total_Confirmed</th>\n",
       "      <th>Total_Deaths</th>\n",
       "      <th>Total_Recovered</th>\n",
       "      <th>Death_Rate(%)</th>\n",
       "      <th>Recover_Rate(%)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Thailand</td>\n",
       "      <td>176</td>\n",
       "      <td>0</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Japan</td>\n",
       "      <td>143</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Singapore</td>\n",
       "      <td>137</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>100</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Australia</td>\n",
       "      <td>92</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Country  Total_Confirmed  Total_Deaths  Total_Recovered  Death_Rate(%)  \\\n",
       "0     Thailand              176             0               46              0   \n",
       "1        Japan              143             0               10              0   \n",
       "2    Singapore              137             0                0              0   \n",
       "3  South Korea              100             0                0              0   \n",
       "4    Australia               92             0               12              0   \n",
       "\n",
       "   Recover_Rate(%)  \n",
       "0               27  \n",
       "1                7  \n",
       "2                0  \n",
       "3                0  \n",
       "4               14  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "connection = pymysql.connect(user='root',\n",
    "                             password='mshhgz999',\n",
    "                             db = 'cov_2019',\n",
    "                             charset='utf8mb4',\n",
    "                             cursorclass=pymysql.cursors.DictCursor)\n",
    "q5 = '''\n",
    "SELECT\n",
    "    Country,\n",
    "    SUM(Confirmed) AS 'Total_Confirmed',\n",
    "    SUM(Deaths) AS 'Total_Deaths',\n",
    "    SUM(Recovered) AS 'Total_Recovered',\n",
    "    CEILING(SUM(Deaths) / SUM(Confirmed) * 100) AS 'Death_Rate(%)',\n",
    "    CEILING(SUM(Recovered) / SUM(Confirmed) * 100) AS 'Recover_Rate(%)'\n",
    "FROM cov_2019.non_chn\n",
    "WHERE Confirmed > 0\n",
    "GROUP BY Country\n",
    "ORDER BY \n",
    "    Total_Confirmed DESC, \n",
    "    Total_Deaths DESC, \n",
    "    Total_Recovered DESC\n",
    "'''\n",
    "\n",
    "cursor = connection.cursor()\n",
    "cursor.execute(q5)\n",
    "\n",
    "x = cursor.fetchall()\n",
    "d_ratio_NCn = pd.DataFrame(x)\n",
    "# col_tp = d_ratio.columns\n",
    "# d_ratio[[col_tp][1:]] = d_ratio[[col_tp][1:]].astype(int)\n",
    "# why this didn't work?\n",
    "try:\n",
    "    d_ratio_NCn[d_ratio_NCn.columns[1:]] = d_ratio_NCn[d_ratio_NCn.columns[1:]].astype(int)\n",
    "except TypeError:\n",
    "    print('Value cannot be converted.')\n",
    "cursor.close()\n",
    "d_ratio_NCn.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Total_Confirmed</th>\n",
       "      <th>Total_Deaths</th>\n",
       "      <th>Total_Recovered</th>\n",
       "      <th>Death_Rate(%)</th>\n",
       "      <th>Recover_Rate(%)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mainland China</td>\n",
       "      <td>121935</td>\n",
       "      <td>2641</td>\n",
       "      <td>3212</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hong Kong, China</td>\n",
       "      <td>130</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Taiwan, China</td>\n",
       "      <td>92</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Macau, China</td>\n",
       "      <td>79</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Country  Total_Confirmed  Total_Deaths  Total_Recovered  \\\n",
       "0    Mainland China           121935          2641             3212   \n",
       "1  Hong Kong, China              130             1                0   \n",
       "2     Taiwan, China               92             0                0   \n",
       "3      Macau, China               79             0                0   \n",
       "\n",
       "   Death_Rate(%)  Recover_Rate(%)  \n",
       "0              3                3  \n",
       "1              1                0  \n",
       "2              0                0  \n",
       "3              0                0  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "connection = pymysql.connect(user='root',\n",
    "                             password='mshhgz999',\n",
    "                             db = 'cov_2019',\n",
    "                             charset='utf8mb4',\n",
    "                             cursorclass=pymysql.cursors.DictCursor)\n",
    "q6 = '''\n",
    "SELECT\n",
    "    Country,\n",
    "    SUM(Confirmed) AS 'Total_Confirmed',\n",
    "    SUM(Deaths) AS 'Total_Deaths',\n",
    "    SUM(Recovered) AS 'Total_Recovered',\n",
    "    CEILING(SUM(Deaths) / SUM(Confirmed) * 100) AS 'Death_Rate(%)',\n",
    "    CEILING(SUM(Recovered) / SUM(Confirmed) * 100) AS 'Recover_Rate(%)'\n",
    "FROM cov_2019.chn\n",
    "WHERE Confirmed > 0\n",
    "GROUP BY Country\n",
    "ORDER BY \n",
    "    Total_Confirmed DESC, \n",
    "    Total_Deaths DESC, \n",
    "    Total_Recovered DESC\n",
    "'''\n",
    "\n",
    "cursor = connection.cursor()\n",
    "cursor.execute(q6)\n",
    "\n",
    "x = cursor.fetchall()\n",
    "d_ratio_Ch = pd.DataFrame(x)\n",
    "try:\n",
    "    d_ratio_Ch[d_ratio_Ch.columns[1:]] = d_ratio_Ch[d_ratio_Ch.columns[1:]].astype(int)\n",
    "except TypeError:\n",
    "    print('Value cannot be converted.')\n",
    "cursor.close()\n",
    "d_ratio_Ch.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Province</th>\n",
       "      <th>Total_Confirmed</th>\n",
       "      <th>Total_Deaths</th>\n",
       "      <th>Total_Recovered</th>\n",
       "      <th>Death_Rate(%)</th>\n",
       "      <th>Recover_Rate(%)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hubei</td>\n",
       "      <td>78176</td>\n",
       "      <td>2546</td>\n",
       "      <td>2075</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Zhejiang</td>\n",
       "      <td>5392</td>\n",
       "      <td>0</td>\n",
       "      <td>204</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Guangdong</td>\n",
       "      <td>4841</td>\n",
       "      <td>0</td>\n",
       "      <td>126</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Henan</td>\n",
       "      <td>4084</td>\n",
       "      <td>19</td>\n",
       "      <td>88</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Hunan</td>\n",
       "      <td>3706</td>\n",
       "      <td>0</td>\n",
       "      <td>86</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Province  Total_Confirmed  Total_Deaths  Total_Recovered  Death_Rate(%)  \\\n",
       "0      Hubei            78176          2546             2075              4   \n",
       "1   Zhejiang             5392             0              204              0   \n",
       "2  Guangdong             4841             0              126              0   \n",
       "3      Henan             4084            19               88              1   \n",
       "4      Hunan             3706             0               86              0   \n",
       "\n",
       "   Recover_Rate(%)  \n",
       "0                3  \n",
       "1                4  \n",
       "2                3  \n",
       "3                3  \n",
       "4                3  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "connection = pymysql.connect(user='root',\n",
    "                             password='mshhgz999',\n",
    "                             db = 'cov_2019',\n",
    "                             charset='utf8mb4',\n",
    "                             cursorclass=pymysql.cursors.DictCursor)\n",
    "q7 = '''\n",
    "SELECT\n",
    "    Province,\n",
    "    SUM(Confirmed) AS 'Total_Confirmed',\n",
    "    SUM(Deaths) AS 'Total_Deaths',\n",
    "    SUM(Recovered) AS 'Total_Recovered',\n",
    "    CEILING(SUM(Deaths) / SUM(Confirmed) * 100) AS 'Death_Rate(%)',\n",
    "    CEILING(SUM(Recovered) / SUM(Confirmed) * 100) AS 'Recover_Rate(%)'\n",
    "FROM cov_2019.chn\n",
    "WHERE Confirmed > 0\n",
    "GROUP BY Province\n",
    "ORDER BY \n",
    "    Total_Confirmed DESC, \n",
    "    Total_Deaths DESC, \n",
    "    Total_Recovered DESC\n",
    "'''\n",
    "\n",
    "cursor = connection.cursor()\n",
    "cursor.execute(q7)\n",
    "\n",
    "x = cursor.fetchall()\n",
    "d_chP_r = pd.DataFrame(x)\n",
    "try:\n",
    "    d_chP_r[d_chP_r.columns[1:]] = d_chP_r[d_chP_r.columns[1:]].astype(int)\n",
    "except TypeError:\n",
    "    print('Value cannot be converted.')\n",
    "cursor.close()\n",
    "d_chP_r.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Value cannot be converted.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>State</th>\n",
       "      <th>Total_Confirmed</th>\n",
       "      <th>Total_Deaths</th>\n",
       "      <th>Total_Recovered</th>\n",
       "      <th>Death_Rate(%)</th>\n",
       "      <th>Recover_Rate(%)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Thailand</td>\n",
       "      <td>None</td>\n",
       "      <td>176</td>\n",
       "      <td>0</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Japan</td>\n",
       "      <td>None</td>\n",
       "      <td>143</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Singapore</td>\n",
       "      <td>None</td>\n",
       "      <td>137</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>None</td>\n",
       "      <td>100</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Malaysia</td>\n",
       "      <td>None</td>\n",
       "      <td>75</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Country State Total_Confirmed Total_Deaths Total_Recovered  \\\n",
       "0     Thailand  None             176            0              46   \n",
       "1        Japan  None             143            0              10   \n",
       "2    Singapore  None             137            0               0   \n",
       "3  South Korea  None             100            0               0   \n",
       "4     Malaysia  None              75            0               0   \n",
       "\n",
       "  Death_Rate(%) Recover_Rate(%)  \n",
       "0             0              27  \n",
       "1             0               7  \n",
       "2             0               0  \n",
       "3             0               0  \n",
       "4             0               0  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "connection = pymysql.connect(user='root',\n",
    "                             password='mshhgz999',\n",
    "                             db = 'cov_2019',\n",
    "                             charset='utf8mb4',\n",
    "                             cursorclass=pymysql.cursors.DictCursor)\n",
    "q8 = '''\n",
    "SELECT\n",
    "    Country,\n",
    "    Province AS 'State',\n",
    "    SUM(Confirmed) AS 'Total_Confirmed',\n",
    "    SUM(Deaths) AS 'Total_Deaths',\n",
    "    SUM(Recovered) AS 'Total_Recovered',\n",
    "    CEILING(SUM(Deaths) / SUM(Confirmed) * 100) AS 'Death_Rate(%)',\n",
    "    CEILING(SUM(Recovered) / SUM(Confirmed) * 100) AS 'Recover_Rate(%)'\n",
    "FROM cov_2019.non_chn\n",
    "WHERE Confirmed > 0\n",
    "GROUP BY \n",
    "    Country,\n",
    "    Province\n",
    "ORDER BY \n",
    "    Total_Confirmed DESC, \n",
    "    Total_Deaths DESC, \n",
    "    Total_Recovered DESC\n",
    "'''\n",
    "\n",
    "cursor = connection.cursor()\n",
    "cursor.execute(q8)\n",
    "\n",
    "x = cursor.fetchall()\n",
    "d_NChS_r = pd.DataFrame(x)\n",
    "try:\n",
    "    d_NChS_r[d_NChS_r.columns[1:]] = d_NChS_r[d_NChS_r.columns[1:]].astype(int)\n",
    "except TypeError:\n",
    "    print('Value cannot be converted.')\n",
    "cursor.close()\n",
    "d_NChS_r.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reporting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1b333cbf340>"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Trend Timeline - China\n",
    "d_chn.groupby('Date').agg('sum').plot.line(figsize = (20,15))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1b333870880>"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "d_nonchn.groupby('Date').agg('sum').plot.line(figsize = (20,15))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1b34b175af0>"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x1440 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Detailed Cse Info based on regions\n",
    "d_chP_r.plot(x = 'Province', kind = 'bar', stacked = 'True', figsize = (25, 20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1b3511c6b20>"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1440 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "d_NChS_r[['Total_Confirmed', 'Total_Deaths','Total_Recovered','Death_Rate(%)', 'Recover_Rate(%)']] = d_NChS_r[['Total_Confirmed', 'Total_Deaths','Total_Recovered','Death_Rate(%)', 'Recover_Rate(%)']].astype(int)\n",
    "d_NChS_r.plot(x = 'Country', kind = 'bar', stacked = 'True', figsize = (15, 20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1b3528fd790>"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "d_timelineCh.plot.area()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1b35295aca0>"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "d_timelineNch.plot.area()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Complete README"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
